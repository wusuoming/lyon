数据结构与算法分析：done(看不懂)
重构-改善既有代码的设计：

xp(extreme programming) 极限编程：

需要客户参与
结对编程
测试驱动开发

项目中的四个变量：成本、时间、质量、范围
对程序员来说最重要的是范围，要控制实现主要的功能、必要的功能、有价值的功能，首先实现客户的最重要需求。

需求、分析、设计、实现、测试、生产(部署)，成本的变化随时间变化而呈指数上升趋势是传统软件过程中的曲线，xp竭力使之演变为一条渐进线。
永远不要设计或实现现在用不到，将来或许会用到的功能，只在需要的时候才实现它。

需求变化、设计变化、业务变化、技术变化、团队变化、团队成员变化。问题不在于变化，因为变化总是要发生。问题实际上是在发生变化时没有能力应付。

四大准则：沟通、简单、反馈、勇气
具体：快速反馈、假设简单性（怎么简单怎么做）、递增更改（小步前进，不搞大跃进）、提倡更改（？）、优质工作（做事不要拖泥带水）。

编码、测试、倾听、设计：
不编码，就什么都没做；不测试，就不知道编码是否正确，是否完成；不倾听，就不知道该编码什么东西；不设计，就无法重复编码、测试和倾听。


代码整洁之道（clean code）：

代码应当具有自解释性，让人一看就懂，为此需要良好的命名，尽可能地减少注释。
一个方法只做一件事，并将这件事做好。如果方法体内包含了许多步骤，尽可能地将他们分散到其他的各个小方法中。总之应当使代码具有自解释性。这样的代价是会创建出许许多多的小方法。

类应当具有类聚性：方法不应接收太多的外界数据。


Javascript权威指南：

html不区分大小写，js区分大小写。事件名在js中小写，如onclick。

（参见63页）
将Number类型转换为String类型：var a = 2; a.toString();//不能直接2.toString(); String(a);
字符串转换为数字："21"*1 = 21; 
boolean值在数值环境中true转换为1，false转换为0。字符串中true为"true"，false为"false"。
用于判断：NaN为false，""为false，undefined为false，null为false，显示地使用函数Boolean(x)或者!!x。

函数本身是一种数据类型，可以将其存放在变量、数组和对象中，并可以将其作为参数传递给其他函数。
λ表达式：var square = function(x) { return x*x; } 

null==undefined==true 双等号比较时可以对值转换，三等号必须连类型也等同。

没有显示使用var来声明的变量都是全局变量，即使是在局部函数中声明。
在函数中，局部变量优先级比全局变量高。如果局部变量与全局变量重名，则会自动隐藏全局变量。
js没有块级变量，在整个函数体内，变量的作用域都是一样的。

不同类型的值比较（参见91页）： 举例  "1"==true ，返回true
in操作符，instanceof操作符（参见93页）
typeof，返回的是字符串。number，string，boolean，object和function。如果运算数未定义，返回undefined。

Object的属性和方法：
constructor：引用初始化该对象的构造函数
数组用[ ]，对象用{ }。数组的下标必须在0~2的32次方-1之内，超过此范围则自动转化为字符串，如arr[-1]，表示arr["-1"]。
使用Function声明的函数不遵守词法作用域，它总是一个顶级函数。

function Circle(radius){
    this.radius = radius;  //实例属性
}
Circle.PI = 3.14159;      //类属性
Circle.prototype.area = function(){return Circle.PI * this.radius * this.radius}          //实例方法
Circle.max = function(a,b){if(a.radius>b.radius) return a;else return b;}                  //类方法

apply,call,constructor,prototype

在客户端Javascript中，Window是全局对象，因此下面两条语句是等价的：
var answer = 42;
window.answer = 42;

javascript是单线程的。
所有的句柄都在脚本执行完后才被触发。


数据结构与算法分析

表：ArrayList、LinkedList
栈：Stack（后进先出）
队列：Queue（删队头，添队尾）
二叉查找树：Binary Search Tree（左子树全比当前节点小，右子树全比当前节点大）