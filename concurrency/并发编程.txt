并发关注点：资源利用，公正，便利。
线程之间共享内存和文件句柄，每个线程都拥有自己的程序计时器，堆栈和局部变量。
向已有的线程安全类添加功能：子类化和使用客户端锁的方式都依赖了已有类的模式，假如已有类修改了API，则会失效。
同步集合：
Vector、HashTable、Collections.synchronizedXxx(工厂方法)
并发集合：
ConcurrentMap(接口)、CopyOnWriteArrayList
5.0提供的新集合：
Queue(接口)，ConcurrentLinkedQueue，PriorityQueue(非同步)。队列操作不阻塞。
BlockingQueue(接口)继承Queue，当队列为空时，取出阻塞；当队列满额时，插入阻塞。
ConcurrentSkipListMap、ConcurrentSkipListSet分别是SortedMap和SortedSet的并发版本。
BlockingQueue的实现类有ArrayBlockingQueue、LinkedBlockingQueue，无界时，put()操作不会阻塞。
Deque是双端队列，用于Work Stealing模式。在这种模式下，每个消费者都有自己的任务队列，处理完后可能从别的消费者的任务队列的列尾获取任务执行，从而保证每个消费者都处于繁忙状态。
synchronized关键字提供排他锁（exclusive lock），但是同步（synchronization）包含了volatile变量的使用，显式锁（explicit lock）和原子变量（atomic variable）。
a class is thread-safe when it continues to behave correctly when accessed from multiple threads.（当一个类被多个线程同时访问时仍能够持续正确运转，它就是线程安全的）。
线程安全的类封装好了任何需要的同步，客户端无需再次提供。
synchronized提供的是互斥锁，即A必须等待B完成才能执行，如果B一直不释放资源，A就永远无法执行。
synchronized提供的锁是可再入的（reentrant），即一个操作可以多次获得某个资源的锁。
对共享的mutable（可变）变量的访问，无论是读写，都必须加锁。
尽可能减小synchronized关键字的作用范围，能在方法块上使用就不要在方法上使用。
同步除了提供锁之外，还提供了内存可见性，即修改对所有访问的线程都可见。
volatile变量：保证对共享变量的修改可以传递到其他线程，但并不保证操作的原子性。
正确发布对象：1、从静态初始化方法初始对象引用；将对象引用存储到volatile变量或者AtomicReference；将其引用存储到final变量或者正确构造的对象中；使用锁。
设计线程安全的类：1、确定组成对象状态的成员变量；2、确定约束状态变量的不变式；3、对状态变量的并发访问确定策略；
可以将线程安全性代理到状态变量上，如果他们相互独立。如使用ConCurrentHashMap、CopyOnWriteArrayList等。
抛出InterruptedException的都是阻塞方法，如果该方法被中断，它会尝试尽可能早地停止阻塞。
Synchronizer（同步器）：BlockingQueue，Semaphore，Barrier，Latch（插销，全部准备好才放行）。
FutureTask实现Future接口，它的Task要实现Callable接口(某种意义上等同于Runnable)。Callable有三种状态：等待执行，执行中，完成。
完成包括正常结束、取消和抛出异常。一旦完成，状态不会再改变。Future.get()方法会阻塞，直到Task完成，立即返回结果。FutureTask在Executor框架中使用，执行异步任务。

Executor Framework
executor持有一个线程池，执行实现Runnable接口的Task。执行策略包括：
1、Task将在什么线程中执行；2、Task将以什么顺序执行（FIFO，LIFO，优先级）；3、可以并发执行多少Task；
4、有多少Task可能会等待执行（阻塞）；5、系统繁忙时，如何决定拒绝执行哪个Task，如何通知应用；
6、Task执行前后应该执行什么动作；
Executor的静态方法
newFixedThreadPool：创建线程直到充满线程池，然后保持不变，除非有线程意外死亡，比如异常。
newCachedThreadPool：无容量限制，当池比任务数多时，可以充分利用闲置的线程；如果任务继续增长，可创建新线程；
newSingleThreadExecutor：不解释；
newScheduledThreadPool：固定大小的线程池，提供延迟和周期性的Task执行，类似于Timer

Future执行的Task之所以是Callable而不是Runnable是因为Callable有返回值；当然，如果不需要返回值，可以Callable<Void>；